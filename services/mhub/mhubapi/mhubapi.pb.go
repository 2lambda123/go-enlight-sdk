// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mhubapi/mhubapi.proto

package mhubapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatus_NOT_SENT  TaskStatus = 0
	TaskStatus_SENT      TaskStatus = 1
	TaskStatus_RECEIVED  TaskStatus = 2
	TaskStatus_COMPLETED TaskStatus = 3
)

var TaskStatus_name = map[int32]string{
	0: "NOT_SENT",
	1: "SENT",
	2: "RECEIVED",
	3: "COMPLETED",
}
var TaskStatus_value = map[string]int32{
	"NOT_SENT":  0,
	"SENT":      1,
	"RECEIVED":  2,
	"COMPLETED": 3,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{0}
}

type AvailableDSKFStreamInput struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableDSKFStreamInput) Reset()         { *m = AvailableDSKFStreamInput{} }
func (m *AvailableDSKFStreamInput) String() string { return proto.CompactTextString(m) }
func (*AvailableDSKFStreamInput) ProtoMessage()    {}
func (*AvailableDSKFStreamInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{0}
}
func (m *AvailableDSKFStreamInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableDSKFStreamInput.Unmarshal(m, b)
}
func (m *AvailableDSKFStreamInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableDSKFStreamInput.Marshal(b, m, deterministic)
}
func (dst *AvailableDSKFStreamInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableDSKFStreamInput.Merge(dst, src)
}
func (m *AvailableDSKFStreamInput) XXX_Size() int {
	return xxx_messageInfo_AvailableDSKFStreamInput.Size(m)
}
func (m *AvailableDSKFStreamInput) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableDSKFStreamInput.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableDSKFStreamInput proto.InternalMessageInfo

type AvailableDSKFStreamOutput struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableDSKFStreamOutput) Reset()         { *m = AvailableDSKFStreamOutput{} }
func (m *AvailableDSKFStreamOutput) String() string { return proto.CompactTextString(m) }
func (*AvailableDSKFStreamOutput) ProtoMessage()    {}
func (*AvailableDSKFStreamOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{1}
}
func (m *AvailableDSKFStreamOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvailableDSKFStreamOutput.Unmarshal(m, b)
}
func (m *AvailableDSKFStreamOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvailableDSKFStreamOutput.Marshal(b, m, deterministic)
}
func (dst *AvailableDSKFStreamOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableDSKFStreamOutput.Merge(dst, src)
}
func (m *AvailableDSKFStreamOutput) XXX_Size() int {
	return xxx_messageInfo_AvailableDSKFStreamOutput.Size(m)
}
func (m *AvailableDSKFStreamOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableDSKFStreamOutput.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableDSKFStreamOutput proto.InternalMessageInfo

func (m *AvailableDSKFStreamOutput) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SetTaskStatusInput struct {
	Id                   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string     `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status               TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mhubapi.TaskStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SetTaskStatusInput) Reset()         { *m = SetTaskStatusInput{} }
func (m *SetTaskStatusInput) String() string { return proto.CompactTextString(m) }
func (*SetTaskStatusInput) ProtoMessage()    {}
func (*SetTaskStatusInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{2}
}
func (m *SetTaskStatusInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetTaskStatusInput.Unmarshal(m, b)
}
func (m *SetTaskStatusInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetTaskStatusInput.Marshal(b, m, deterministic)
}
func (dst *SetTaskStatusInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetTaskStatusInput.Merge(dst, src)
}
func (m *SetTaskStatusInput) XXX_Size() int {
	return xxx_messageInfo_SetTaskStatusInput.Size(m)
}
func (m *SetTaskStatusInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SetTaskStatusInput.DiscardUnknown(m)
}

var xxx_messageInfo_SetTaskStatusInput proto.InternalMessageInfo

func (m *SetTaskStatusInput) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetTaskStatusInput) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SetTaskStatusInput) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatus_NOT_SENT
}

type DeepPingOutput struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeepPingOutput) Reset()         { *m = DeepPingOutput{} }
func (m *DeepPingOutput) String() string { return proto.CompactTextString(m) }
func (*DeepPingOutput) ProtoMessage()    {}
func (*DeepPingOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{3}
}
func (m *DeepPingOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeepPingOutput.Unmarshal(m, b)
}
func (m *DeepPingOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeepPingOutput.Marshal(b, m, deterministic)
}
func (dst *DeepPingOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeepPingOutput.Merge(dst, src)
}
func (m *DeepPingOutput) XXX_Size() int {
	return xxx_messageInfo_DeepPingOutput.Size(m)
}
func (m *DeepPingOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_DeepPingOutput.DiscardUnknown(m)
}

var xxx_messageInfo_DeepPingOutput proto.InternalMessageInfo

func (m *DeepPingOutput) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_mhubapi_048cd30a62c0b162, []int{4}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (dst *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(dst, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AvailableDSKFStreamInput)(nil), "mhubapi.AvailableDSKFStreamInput")
	proto.RegisterType((*AvailableDSKFStreamOutput)(nil), "mhubapi.AvailableDSKFStreamOutput")
	proto.RegisterType((*SetTaskStatusInput)(nil), "mhubapi.SetTaskStatusInput")
	proto.RegisterType((*DeepPingOutput)(nil), "mhubapi.DeepPingOutput")
	proto.RegisterType((*Void)(nil), "mhubapi.Void")
	proto.RegisterEnum("mhubapi.TaskStatus", TaskStatus_name, TaskStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MicrologProxyHubClient is the client API for MicrologProxyHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MicrologProxyHubClient interface {
	DeepPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DeepPingOutput, error)
	SetTaskStatus(ctx context.Context, in *SetTaskStatusInput, opts ...grpc.CallOption) (*Void, error)
	AvailableDSKFStream(ctx context.Context, in *AvailableDSKFStreamInput, opts ...grpc.CallOption) (MicrologProxyHub_AvailableDSKFStreamClient, error)
}

type micrologProxyHubClient struct {
	cc *grpc.ClientConn
}

func NewMicrologProxyHubClient(cc *grpc.ClientConn) MicrologProxyHubClient {
	return &micrologProxyHubClient{cc}
}

func (c *micrologProxyHubClient) DeepPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*DeepPingOutput, error) {
	out := new(DeepPingOutput)
	err := c.cc.Invoke(ctx, "/mhubapi.MicrologProxyHub/DeepPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micrologProxyHubClient) SetTaskStatus(ctx context.Context, in *SetTaskStatusInput, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/mhubapi.MicrologProxyHub/SetTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micrologProxyHubClient) AvailableDSKFStream(ctx context.Context, in *AvailableDSKFStreamInput, opts ...grpc.CallOption) (MicrologProxyHub_AvailableDSKFStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MicrologProxyHub_serviceDesc.Streams[0], "/mhubapi.MicrologProxyHub/AvailableDSKFStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &micrologProxyHubAvailableDSKFStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MicrologProxyHub_AvailableDSKFStreamClient interface {
	Recv() (*AvailableDSKFStreamOutput, error)
	grpc.ClientStream
}

type micrologProxyHubAvailableDSKFStreamClient struct {
	grpc.ClientStream
}

func (x *micrologProxyHubAvailableDSKFStreamClient) Recv() (*AvailableDSKFStreamOutput, error) {
	m := new(AvailableDSKFStreamOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MicrologProxyHubServer is the server API for MicrologProxyHub service.
type MicrologProxyHubServer interface {
	DeepPing(context.Context, *Void) (*DeepPingOutput, error)
	SetTaskStatus(context.Context, *SetTaskStatusInput) (*Void, error)
	AvailableDSKFStream(*AvailableDSKFStreamInput, MicrologProxyHub_AvailableDSKFStreamServer) error
}

func RegisterMicrologProxyHubServer(s *grpc.Server, srv MicrologProxyHubServer) {
	s.RegisterService(&_MicrologProxyHub_serviceDesc, srv)
}

func _MicrologProxyHub_DeepPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrologProxyHubServer).DeepPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhubapi.MicrologProxyHub/DeepPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrologProxyHubServer).DeepPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicrologProxyHub_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrologProxyHubServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mhubapi.MicrologProxyHub/SetTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrologProxyHubServer).SetTaskStatus(ctx, req.(*SetTaskStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicrologProxyHub_AvailableDSKFStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AvailableDSKFStreamInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MicrologProxyHubServer).AvailableDSKFStream(m, &micrologProxyHubAvailableDSKFStreamServer{stream})
}

type MicrologProxyHub_AvailableDSKFStreamServer interface {
	Send(*AvailableDSKFStreamOutput) error
	grpc.ServerStream
}

type micrologProxyHubAvailableDSKFStreamServer struct {
	grpc.ServerStream
}

func (x *micrologProxyHubAvailableDSKFStreamServer) Send(m *AvailableDSKFStreamOutput) error {
	return x.ServerStream.SendMsg(m)
}

var _MicrologProxyHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mhubapi.MicrologProxyHub",
	HandlerType: (*MicrologProxyHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeepPing",
			Handler:    _MicrologProxyHub_DeepPing_Handler,
		},
		{
			MethodName: "SetTaskStatus",
			Handler:    _MicrologProxyHub_SetTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AvailableDSKFStream",
			Handler:       _MicrologProxyHub_AvailableDSKFStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mhubapi/mhubapi.proto",
}

func init() { proto.RegisterFile("mhubapi/mhubapi.proto", fileDescriptor_mhubapi_048cd30a62c0b162) }

var fileDescriptor_mhubapi_048cd30a62c0b162 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x69, 0xe1, 0x15, 0xb8, 0x79, 0x90, 0xe6, 0xf2, 0x5e, 0xa8, 0x75, 0x83, 0xb3, 0x30,
	0x44, 0x12, 0x34, 0xe8, 0xd6, 0x05, 0xa1, 0x35, 0x12, 0xe5, 0x4f, 0xda, 0x86, 0x2d, 0xb6, 0x76,
	0x82, 0xa3, 0x85, 0x36, 0xed, 0x0c, 0xd1, 0x8f, 0xec, 0xb7, 0x30, 0xd4, 0x52, 0x82, 0xa2, 0xab,
	0x99, 0x33, 0x73, 0xe6, 0xdc, 0x5f, 0xee, 0x1d, 0xf8, 0xbf, 0x7c, 0x12, 0x9e, 0x1b, 0xb1, 0xf3,
	0x6c, 0xed, 0x46, 0x71, 0xc8, 0x43, 0x2c, 0x67, 0x92, 0xe8, 0xa0, 0xf5, 0xd7, 0x2e, 0x0b, 0x5c,
	0x2f, 0xa0, 0x86, 0x7d, 0x77, 0x63, 0xf3, 0x98, 0xba, 0xcb, 0xe1, 0x2a, 0x12, 0x9c, 0x74, 0xe0,
	0xe8, 0xc0, 0xdd, 0x44, 0xf0, 0x48, 0x70, 0xac, 0x83, 0xcc, 0x7c, 0x4d, 0x6a, 0x49, 0xed, 0xa2,
	0x25, 0x33, 0x9f, 0x3c, 0x03, 0xda, 0x94, 0x3b, 0x6e, 0xf2, 0x62, 0x73, 0x97, 0x8b, 0x24, 0x8d,
	0xf8, 0xea, 0xc2, 0x26, 0x94, 0x45, 0x42, 0xe3, 0x39, 0xf3, 0x35, 0xb9, 0x25, 0xb5, 0xab, 0x96,
	0xb2, 0x91, 0x43, 0x1f, 0x3b, 0xa0, 0x24, 0xe9, 0x3b, 0xad, 0xd8, 0x92, 0xda, 0xf5, 0x5e, 0xa3,
	0xbb, 0x05, 0xde, 0x45, 0x5a, 0x99, 0x85, 0x9c, 0x42, 0xdd, 0xa0, 0x34, 0x9a, 0xb2, 0xd5, 0x22,
	0xa3, 0xf9, 0x07, 0x7f, 0xd6, 0x6e, 0x20, 0x68, 0x5a, 0xaa, 0x6a, 0x7d, 0x0a, 0xa2, 0x40, 0x69,
	0x16, 0x32, 0xff, 0xac, 0x0f, 0xb0, 0x4b, 0xc1, 0xbf, 0x50, 0x19, 0x4f, 0x9c, 0xb9, 0x6d, 0x8e,
	0x1d, 0xb5, 0x80, 0x15, 0x28, 0xa5, 0x3b, 0x69, 0x73, 0x6e, 0x99, 0x03, 0x73, 0x38, 0x33, 0x0d,
	0x55, 0xc6, 0x1a, 0x54, 0x07, 0x93, 0xd1, 0xf4, 0xde, 0x74, 0x4c, 0x43, 0x2d, 0xf6, 0xde, 0x25,
	0x50, 0x47, 0xec, 0x31, 0x0e, 0x83, 0x70, 0x31, 0x8d, 0xc3, 0xd7, 0xb7, 0x5b, 0xe1, 0xe1, 0x15,
	0x54, 0xb6, 0x1c, 0x58, 0xcb, 0x81, 0x37, 0x25, 0xf5, 0x66, 0x2e, 0xf7, 0x49, 0x49, 0x01, 0xaf,
	0xa1, 0xb6, 0xd7, 0x29, 0x3c, 0xce, 0xbd, 0xdf, 0x3b, 0xa8, 0xef, 0xe7, 0x92, 0x02, 0x3e, 0x40,
	0xe3, 0xc0, 0x54, 0xf0, 0x24, 0xf7, 0xfd, 0x34, 0x4f, 0x9d, 0xfc, 0x66, 0xd9, 0xe2, 0x5d, 0x48,
	0x9e, 0x92, 0xfe, 0x91, 0xcb, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x2f, 0x82, 0xe6, 0x3c,
	0x02, 0x00, 0x00,
}
