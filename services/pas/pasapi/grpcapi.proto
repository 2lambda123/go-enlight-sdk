syntax = "proto3";

package pasapi;

service PointAlarmStatus {
  rpc DeepPing (Void) returns (DeepPingOutput) {}

  rpc SetPointAlarmThresholds (SetPointAlarmThresholdsInput) returns (SetPointAlarmThresholdsOutput) {}
  rpc GetPointAlarmThresholds (GetPointAlarmThresholdsInput) returns (GetPointAlarmThresholdsOutput) {}

  rpc SetPointAlarmStatus (SetPointAlarmStatusInput) returns (SetPointAlarmStatusOutput) {}
  rpc GetPointAlarmStatus (GetPointAlarmStatusInput) returns (GetPointAlarmStatusOutput) {}
  rpc GetPointAlarmStatusStream (GetPointAlarmStatusStreamInput) returns (stream GetPointAlarmStatusStreamOutput) {}
}


// DeepPing Messages
message DeepPingOutput {
  string value = 1;
}


// SetPointAlarmThresholds Messages
message SetPointAlarmThresholdsInput {
  string node_id = 1;
  string user_id = 2;
  AlarmStatusIntervals intervals = 3;
}
message SetPointAlarmThresholdsOutput {}


// GetPointAlarmThresholds Messages
message GetPointAlarmThresholdsInput {
  string node_id = 1;
}
message GetPointAlarmThresholdsOutput {
  AlarmStatusIntervals intervals = 1;
}


// SetPointAlarmStatus Messages
message SetPointAlarmStatusInput {
  string node_id = 1;
  AlarmStatus alarm_status = 2;
}
message SetPointAlarmStatusOutput {}


// GetPointAlarmStatus Messages
message GetPointAlarmStatusInput {
  string node_id = 1;
}
message GetPointAlarmStatusOutput {
  AlarmStatus alarm_status = 1;
}


// GetPointAlarmStatusStream Messages
message GetPointAlarmStatusStreamInput {}
message GetPointAlarmStatusStreamOutput {
  string node_id = 1;
  AlarmStatus alarm_status = 2;
}


enum AlarmStatus {
  NOT_CONFIGURED = 0; // No thresholds configured.
  NO_DATA = 1;        // No measurement data.
  GOOD = 2;           // Latest measurement data within a good interval.
  ALERT = 3;          // Latest measurement data within an alert interval.
  DANGER = 4;         // Latest measurement data within a danger interval.
}

message Void {}

// https://en.wikipedia.org/wiki/Interval_(mathematics)#Classification_of_intervals
enum IntervalType {
  BOUNDED_OPEN = 0;                              // (0,1) = 0<x<1    Open Interval
  BOUNDED_CLOSED = 1;                            // [0,1] = 0<=x<=1  Closed Interval
  BOUNDED_LEFT_OPEN_RIGHT_CLOSED = 2;            // (0,1] = 0<x<=1   Left-open, Right-closed
  BOUNDED_LEFT_CLOSED_RIGHT_OPEN = 3;            // [0,1) = 0<=x<1   Left-closed, Right-open
  LEFT_UNBOUNDED_RIGHT_BOUNDED_RIGHT_OPEN = 4;   // (−∞,1) = x<1     Right-open
  LEFT_UNBOUNDED_RIGHT_BOUNDED_RIGHT_CLOSED = 5; // (−∞,1] = x<=1    Right-closed
  LEFT_BOUNDED_RIGHT_UNBOUNDED_LEFT_OPEN = 6;    // (0,+∞) = 0<x     Left-open
  LEFT_BOUNDED_RIGHT_UNBOUNDED_LEFT_CLOSED = 7;  // [0,+∞) = 0<=x    Left-closed
}

message AlarmStatusInterval {
  double left_bound = 1;
  double right_bound = 2;
  IntervalType type = 3;
  AlarmStatus alarm_status = 4;
}

message AlarmStatusIntervals {
  repeated AlarmStatusInterval list = 1;
}