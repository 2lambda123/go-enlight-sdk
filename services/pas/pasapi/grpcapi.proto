syntax = "proto3";

package pasapi;

service PointAlarmStatus {
  rpc DeepPing (Void) returns (DeepPingOutput) {}

  rpc SetPointThreshold (SetPointThresholdInput) returns (SetPointThresholdOutput) {}
  rpc GetPointThreshold (GetPointThresholdInput) returns (GetPointThresholdOutput) {}

  rpc SetPointStatus (SetPointStatusInput) returns (SetPointStatusOutput) {}
  rpc GetPointStatus (GetPointStatusInput) returns (GetPointStatusOutput) {}
  rpc GetPointStatusStream (GetPointStatusStreamInput) returns (stream GetPointStatusStreamOutput) {}
}


// DeepPing Messages
message DeepPingOutput {
  string value = 1;
}


// SetPointThreshold Messages
message SetPointThresholdInput {
  string node_id = 1;
  string user_id = 2;
  repeated AlarmStatusInterval intervals = 3;
}
message SetPointThresholdOutput {}


// GetPointThreshold Messages
message GetPointThresholdInput {
  string node_id = 1;
}
message GetPointThresholdOutput {
  AlarmStatusIntervals intervals = 1;
}


// SetPointStatus Messages
message SetPointStatusInput {
  string node_id = 1;
  AlarmStatus alarm_status = 2;
}
message SetPointStatusOutput {}


// GetPointStatus Messages
message GetPointStatusInput {
  string node_id = 1;
}
message GetPointStatusOutput {
  AlarmStatus alarm_status = 1;
}


// GetPointStatusStream Messages
message GetPointStatusStreamInput {}
message GetPointStatusStreamOutput {
  string node_id = 1;
  AlarmStatus alarm_status = 2;
}


enum AlarmStatus {
  NOT_CONFIGURED = 0; // No threshold configured.
  NO_DATA = 1;        // No measurement data.
  GOOD = 2;           // Latest measurement data within a good interval.
  ALERT = 3;          // Latest measurement data within an alert interval.
  DANGER = 4;         // Latest measurement data within a danger interval.
}

message Void {}

// https://en.wikipedia.org/wiki/Interval_(mathematics)#Classification_of_intervals
enum IntervalType {
  BOUNDED_OPEN = 0;                              // (0,1) = 0<x<1    Open Interval
  BOUNDED_CLOSED = 1;                            // [0,1] = 0<=x<=1  Closed Interval
  BOUNDED_LEFT_OPEN_RIGHT_CLOSED = 2;            // (0,1] = 0<x<=1   Left-open, Right-closed
  BOUNDED_LEFT_CLOSED_RIGHT_OPEN = 3;            // [0,1) = 0<=x<1   Left-closed, Right-open
  LEFT_UNBOUNDED_RIGHT_BOUNDED_RIGHT_OPEN = 4;   // (−∞,1) = x<1     Right-open
  LEFT_UNBOUNDED_RIGHT_BOUNDED_RIGHT_CLOSED = 5; // (−∞,1] = x<=1    Right-closed
  LEFT_BOUNDED_RIGHT_UNBOUNDED_LEFT_OPEN = 6;    // (0,+∞) = 0<x     Left-open
  LEFT_BOUNDED_RIGHT_UNBOUNDED_LEFT_CLOSED = 7;  // [0,+∞) = 0<=x    Left-closed
}

message AlarmStatusInterval {
  double left_bound = 1;
  double right_bound = 2;
  IntervalType type = 3;
  AlarmStatus alarm_status = 4;
}

message AlarmStatusIntervals {
  repeated AlarmStatusInterval list = 1;
}