// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcapi.proto

/*
Package grpcapi is a generated protocol buffer package.

It is generated from these files:
	grpcapi.proto

It has these top-level messages:
	Origin
	MeasurementPoint
	InspectionPoint
	AssetNode
	Node
	Nodes
	GetEventsInput
	GetEventsOutput
	SaveNodeInput
	DeleteNodeInput
	GetAncestorsInput
	GetAncestorsOutput
	AncestorNode
	PrimitiveString
	PrimitiveInt32
	PrimitiveInt64
	PrimitiveBytes
	PrimitiveVoid
*/
package grpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValueType int32

const (
	ValueType_NUMERIC       ValueType = 0
	ValueType_SINGLE_CHOICE ValueType = 1
	ValueType_MULTI_CHOICE  ValueType = 2
)

var ValueType_name = map[int32]string{
	0: "NUMERIC",
	1: "SINGLE_CHOICE",
	2: "MULTI_CHOICE",
}
var ValueType_value = map[string]int32{
	"NUMERIC":       0,
	"SINGLE_CHOICE": 1,
	"MULTI_CHOICE":  2,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Origin struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
}

func (m *Origin) Reset()                    { *m = Origin{} }
func (m *Origin) String() string            { return proto.CompactTextString(m) }
func (*Origin) ProtoMessage()               {}
func (*Origin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Origin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Origin) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Origin) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type MeasurementPoint struct {
	Angular         string `protobuf:"bytes,1,opt,name=angular" json:"angular,omitempty"`
	Bearing         int32  `protobuf:"varint,3,opt,name=bearing" json:"bearing,omitempty"`
	MeasurementType string `protobuf:"bytes,4,opt,name=measurementType" json:"measurementType,omitempty"`
	Shaft           string `protobuf:"bytes,5,opt,name=shaft" json:"shaft,omitempty"`
	ShaftSide       string `protobuf:"bytes,6,opt,name=shaftSide" json:"shaftSide,omitempty"`
}

func (m *MeasurementPoint) Reset()                    { *m = MeasurementPoint{} }
func (m *MeasurementPoint) String() string            { return proto.CompactTextString(m) }
func (*MeasurementPoint) ProtoMessage()               {}
func (*MeasurementPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MeasurementPoint) GetAngular() string {
	if m != nil {
		return m.Angular
	}
	return ""
}

func (m *MeasurementPoint) GetBearing() int32 {
	if m != nil {
		return m.Bearing
	}
	return 0
}

func (m *MeasurementPoint) GetMeasurementType() string {
	if m != nil {
		return m.MeasurementType
	}
	return ""
}

func (m *MeasurementPoint) GetShaft() string {
	if m != nil {
		return m.Shaft
	}
	return ""
}

func (m *MeasurementPoint) GetShaftSide() string {
	if m != nil {
		return m.ShaftSide
	}
	return ""
}

type InspectionPoint struct {
	OBSOLETEValueType string    `protobuf:"bytes,1,opt,name=OBSOLETE_valueType,json=OBSOLETEValueType" json:"OBSOLETE_valueType,omitempty"`
	ValueType         ValueType `protobuf:"varint,4,opt,name=valueType,enum=grpcapi.ValueType" json:"valueType,omitempty"`
	NumericUnit       string    `protobuf:"bytes,2,opt,name=numericUnit" json:"numericUnit,omitempty"`
	Answers           []string  `protobuf:"bytes,3,rep,name=answers" json:"answers,omitempty"`
}

func (m *InspectionPoint) Reset()                    { *m = InspectionPoint{} }
func (m *InspectionPoint) String() string            { return proto.CompactTextString(m) }
func (*InspectionPoint) ProtoMessage()               {}
func (*InspectionPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InspectionPoint) GetOBSOLETEValueType() string {
	if m != nil {
		return m.OBSOLETEValueType
	}
	return ""
}

func (m *InspectionPoint) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return ValueType_NUMERIC
}

func (m *InspectionPoint) GetNumericUnit() string {
	if m != nil {
		return m.NumericUnit
	}
	return ""
}

func (m *InspectionPoint) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

type AssetNode struct {
	Criticality string `protobuf:"bytes,1,opt,name=criticality" json:"criticality,omitempty"`
}

func (m *AssetNode) Reset()                    { *m = AssetNode{} }
func (m *AssetNode) String() string            { return proto.CompactTextString(m) }
func (*AssetNode) ProtoMessage()               {}
func (*AssetNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AssetNode) GetCriticality() string {
	if m != nil {
		return m.Criticality
	}
	return ""
}

type Node struct {
	Id               string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label            string            `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description      string            `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Type             string            `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Criticality      string            `protobuf:"bytes,5,opt,name=criticality" json:"criticality,omitempty"`
	SubType          string            `protobuf:"bytes,6,opt,name=subType" json:"subType,omitempty"`
	Origin           *Origin           `protobuf:"bytes,7,opt,name=origin" json:"origin,omitempty"`
	AssetNode        *AssetNode        `protobuf:"bytes,8,opt,name=assetNode" json:"assetNode,omitempty"`
	MeasurementPoint *MeasurementPoint `protobuf:"bytes,9,opt,name=measurementPoint" json:"measurementPoint,omitempty"`
	InspectionPoint  *InspectionPoint  `protobuf:"bytes,10,opt,name=inspectionPoint" json:"inspectionPoint,omitempty"`
	ChildOrderNumber *PrimitiveInt64   `protobuf:"bytes,12,opt,name=childOrderNumber" json:"childOrderNumber,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Node) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node) GetCriticality() string {
	if m != nil {
		return m.Criticality
	}
	return ""
}

func (m *Node) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *Node) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *Node) GetAssetNode() *AssetNode {
	if m != nil {
		return m.AssetNode
	}
	return nil
}

func (m *Node) GetMeasurementPoint() *MeasurementPoint {
	if m != nil {
		return m.MeasurementPoint
	}
	return nil
}

func (m *Node) GetInspectionPoint() *InspectionPoint {
	if m != nil {
		return m.InspectionPoint
	}
	return nil
}

func (m *Node) GetChildOrderNumber() *PrimitiveInt64 {
	if m != nil {
		return m.ChildOrderNumber
	}
	return nil
}

type Nodes struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetEventsInput struct {
	Since int64           `protobuf:"varint,1,opt,name=since" json:"since,omitempty"`
	Limit *PrimitiveInt32 `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetEventsInput) Reset()                    { *m = GetEventsInput{} }
func (m *GetEventsInput) String() string            { return proto.CompactTextString(m) }
func (*GetEventsInput) ProtoMessage()               {}
func (*GetEventsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetEventsInput) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *GetEventsInput) GetLimit() *PrimitiveInt32 {
	if m != nil {
		return m.Limit
	}
	return nil
}

type GetEventsOutput struct {
	Events []byte `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
}

func (m *GetEventsOutput) Reset()                    { *m = GetEventsOutput{} }
func (m *GetEventsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetEventsOutput) ProtoMessage()               {}
func (*GetEventsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetEventsOutput) GetEvents() []byte {
	if m != nil {
		return m.Events
	}
	return nil
}

type SaveNodeInput struct {
	UserId       string  `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	Node         *Node   `protobuf:"bytes,3,opt,name=node" json:"node,omitempty"`
	ParentId     string  `protobuf:"bytes,2,opt,name=parentId" json:"parentId,omitempty"`
	ParentOrigin *Origin `protobuf:"bytes,4,opt,name=parentOrigin" json:"parentOrigin,omitempty"`
}

func (m *SaveNodeInput) Reset()                    { *m = SaveNodeInput{} }
func (m *SaveNodeInput) String() string            { return proto.CompactTextString(m) }
func (*SaveNodeInput) ProtoMessage()               {}
func (*SaveNodeInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SaveNodeInput) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SaveNodeInput) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *SaveNodeInput) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *SaveNodeInput) GetParentOrigin() *Origin {
	if m != nil {
		return m.ParentOrigin
	}
	return nil
}

type DeleteNodeInput struct {
	UserId string  `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	NodeId string  `protobuf:"bytes,2,opt,name=nodeId" json:"nodeId,omitempty"`
	Origin *Origin `protobuf:"bytes,3,opt,name=origin" json:"origin,omitempty"`
}

func (m *DeleteNodeInput) Reset()                    { *m = DeleteNodeInput{} }
func (m *DeleteNodeInput) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeInput) ProtoMessage()               {}
func (*DeleteNodeInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteNodeInput) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteNodeInput) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *DeleteNodeInput) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

type GetAncestorsInput struct {
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *GetAncestorsInput) Reset()                    { *m = GetAncestorsInput{} }
func (m *GetAncestorsInput) String() string            { return proto.CompactTextString(m) }
func (*GetAncestorsInput) ProtoMessage()               {}
func (*GetAncestorsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetAncestorsInput) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type GetAncestorsOutput struct {
	Nodes []*AncestorNode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *GetAncestorsOutput) Reset()                    { *m = GetAncestorsOutput{} }
func (m *GetAncestorsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetAncestorsOutput) ProtoMessage()               {}
func (*GetAncestorsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetAncestorsOutput) GetNodes() []*AncestorNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type AncestorNode struct {
	Id          string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Origin      *Origin `protobuf:"bytes,2,opt,name=origin" json:"origin,omitempty"`
	Label       string  `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Description string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Type        string  `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	SubType     string  `protobuf:"bytes,6,opt,name=subType" json:"subType,omitempty"`
	ParentId    string  `protobuf:"bytes,7,opt,name=parentId" json:"parentId,omitempty"`
}

func (m *AncestorNode) Reset()                    { *m = AncestorNode{} }
func (m *AncestorNode) String() string            { return proto.CompactTextString(m) }
func (*AncestorNode) ProtoMessage()               {}
func (*AncestorNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AncestorNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AncestorNode) GetOrigin() *Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *AncestorNode) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *AncestorNode) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AncestorNode) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AncestorNode) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *AncestorNode) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

type PrimitiveString struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *PrimitiveString) Reset()                    { *m = PrimitiveString{} }
func (m *PrimitiveString) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveString) ProtoMessage()               {}
func (*PrimitiveString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PrimitiveString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PrimitiveInt32 struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *PrimitiveInt32) Reset()                    { *m = PrimitiveInt32{} }
func (m *PrimitiveInt32) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveInt32) ProtoMessage()               {}
func (*PrimitiveInt32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PrimitiveInt32) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PrimitiveInt64 struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *PrimitiveInt64) Reset()                    { *m = PrimitiveInt64{} }
func (m *PrimitiveInt64) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveInt64) ProtoMessage()               {}
func (*PrimitiveInt64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PrimitiveInt64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PrimitiveBytes struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PrimitiveBytes) Reset()                    { *m = PrimitiveBytes{} }
func (m *PrimitiveBytes) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveBytes) ProtoMessage()               {}
func (*PrimitiveBytes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PrimitiveBytes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PrimitiveVoid struct {
}

func (m *PrimitiveVoid) Reset()                    { *m = PrimitiveVoid{} }
func (m *PrimitiveVoid) String() string            { return proto.CompactTextString(m) }
func (*PrimitiveVoid) ProtoMessage()               {}
func (*PrimitiveVoid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func init() {
	proto.RegisterType((*Origin)(nil), "grpcapi.Origin")
	proto.RegisterType((*MeasurementPoint)(nil), "grpcapi.MeasurementPoint")
	proto.RegisterType((*InspectionPoint)(nil), "grpcapi.InspectionPoint")
	proto.RegisterType((*AssetNode)(nil), "grpcapi.AssetNode")
	proto.RegisterType((*Node)(nil), "grpcapi.Node")
	proto.RegisterType((*Nodes)(nil), "grpcapi.Nodes")
	proto.RegisterType((*GetEventsInput)(nil), "grpcapi.GetEventsInput")
	proto.RegisterType((*GetEventsOutput)(nil), "grpcapi.GetEventsOutput")
	proto.RegisterType((*SaveNodeInput)(nil), "grpcapi.SaveNodeInput")
	proto.RegisterType((*DeleteNodeInput)(nil), "grpcapi.DeleteNodeInput")
	proto.RegisterType((*GetAncestorsInput)(nil), "grpcapi.GetAncestorsInput")
	proto.RegisterType((*GetAncestorsOutput)(nil), "grpcapi.GetAncestorsOutput")
	proto.RegisterType((*AncestorNode)(nil), "grpcapi.AncestorNode")
	proto.RegisterType((*PrimitiveString)(nil), "grpcapi.PrimitiveString")
	proto.RegisterType((*PrimitiveInt32)(nil), "grpcapi.PrimitiveInt32")
	proto.RegisterType((*PrimitiveInt64)(nil), "grpcapi.PrimitiveInt64")
	proto.RegisterType((*PrimitiveBytes)(nil), "grpcapi.PrimitiveBytes")
	proto.RegisterType((*PrimitiveVoid)(nil), "grpcapi.PrimitiveVoid")
	proto.RegisterEnum("grpcapi.ValueType", ValueType_name, ValueType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hierarchy service

type HierarchyClient interface {
	DeepPing(ctx context.Context, in *PrimitiveVoid, opts ...grpc.CallOption) (*PrimitiveString, error)
	GetNode(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Node, error)
	GetNodes(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Nodes, error)
	GetChildNodes(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Nodes, error)
	GetParentNode(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Node, error)
	GetAncestors(ctx context.Context, in *GetAncestorsInput, opts ...grpc.CallOption) (*GetAncestorsOutput, error)
	GetNodeIdByOrigin(ctx context.Context, in *Origin, opts ...grpc.CallOption) (*PrimitiveString, error)
	SaveNode(ctx context.Context, in *SaveNodeInput, opts ...grpc.CallOption) (*PrimitiveString, error)
	DeleteNode(ctx context.Context, in *DeleteNodeInput, opts ...grpc.CallOption) (*PrimitiveVoid, error)
	GetEvents(ctx context.Context, in *GetEventsInput, opts ...grpc.CallOption) (*GetEventsOutput, error)
}

type hierarchyClient struct {
	cc *grpc.ClientConn
}

func NewHierarchyClient(cc *grpc.ClientConn) HierarchyClient {
	return &hierarchyClient{cc}
}

func (c *hierarchyClient) DeepPing(ctx context.Context, in *PrimitiveVoid, opts ...grpc.CallOption) (*PrimitiveString, error) {
	out := new(PrimitiveString)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/DeepPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNode(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNodes(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetChildNodes(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetChildNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetParentNode(ctx context.Context, in *PrimitiveString, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetParentNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetAncestors(ctx context.Context, in *GetAncestorsInput, opts ...grpc.CallOption) (*GetAncestorsOutput, error) {
	out := new(GetAncestorsOutput)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetAncestors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetNodeIdByOrigin(ctx context.Context, in *Origin, opts ...grpc.CallOption) (*PrimitiveString, error) {
	out := new(PrimitiveString)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetNodeIdByOrigin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) SaveNode(ctx context.Context, in *SaveNodeInput, opts ...grpc.CallOption) (*PrimitiveString, error) {
	out := new(PrimitiveString)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/SaveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) DeleteNode(ctx context.Context, in *DeleteNodeInput, opts ...grpc.CallOption) (*PrimitiveVoid, error) {
	out := new(PrimitiveVoid)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/DeleteNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hierarchyClient) GetEvents(ctx context.Context, in *GetEventsInput, opts ...grpc.CallOption) (*GetEventsOutput, error) {
	out := new(GetEventsOutput)
	err := grpc.Invoke(ctx, "/grpcapi.Hierarchy/GetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hierarchy service

type HierarchyServer interface {
	DeepPing(context.Context, *PrimitiveVoid) (*PrimitiveString, error)
	GetNode(context.Context, *PrimitiveString) (*Node, error)
	GetNodes(context.Context, *PrimitiveString) (*Nodes, error)
	GetChildNodes(context.Context, *PrimitiveString) (*Nodes, error)
	GetParentNode(context.Context, *PrimitiveString) (*Node, error)
	GetAncestors(context.Context, *GetAncestorsInput) (*GetAncestorsOutput, error)
	GetNodeIdByOrigin(context.Context, *Origin) (*PrimitiveString, error)
	SaveNode(context.Context, *SaveNodeInput) (*PrimitiveString, error)
	DeleteNode(context.Context, *DeleteNodeInput) (*PrimitiveVoid, error)
	GetEvents(context.Context, *GetEventsInput) (*GetEventsOutput, error)
}

func RegisterHierarchyServer(s *grpc.Server, srv HierarchyServer) {
	s.RegisterService(&_Hierarchy_serviceDesc, srv)
}

func _Hierarchy_DeepPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimitiveVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).DeepPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/DeepPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).DeepPing(ctx, req.(*PrimitiveVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNode(ctx, req.(*PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNodes(ctx, req.(*PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetChildNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetChildNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetChildNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetChildNodes(ctx, req.(*PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetParentNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimitiveString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetParentNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetParentNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetParentNode(ctx, req.(*PrimitiveString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestorsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetAncestors(ctx, req.(*GetAncestorsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetNodeIdByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Origin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetNodeIdByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetNodeIdByOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetNodeIdByOrigin(ctx, req.(*Origin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_SaveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).SaveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/SaveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).SaveNode(ctx, req.(*SaveNodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).DeleteNode(ctx, req.(*DeleteNodeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hierarchy_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HierarchyServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.Hierarchy/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HierarchyServer).GetEvents(ctx, req.(*GetEventsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hierarchy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Hierarchy",
	HandlerType: (*HierarchyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeepPing",
			Handler:    _Hierarchy_DeepPing_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Hierarchy_GetNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _Hierarchy_GetNodes_Handler,
		},
		{
			MethodName: "GetChildNodes",
			Handler:    _Hierarchy_GetChildNodes_Handler,
		},
		{
			MethodName: "GetParentNode",
			Handler:    _Hierarchy_GetParentNode_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _Hierarchy_GetAncestors_Handler,
		},
		{
			MethodName: "GetNodeIdByOrigin",
			Handler:    _Hierarchy_GetNodeIdByOrigin_Handler,
		},
		{
			MethodName: "SaveNode",
			Handler:    _Hierarchy_SaveNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _Hierarchy_DeleteNode_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Hierarchy_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapi.proto",
}

func init() { proto.RegisterFile("grpcapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4b, 0x6f, 0xe3, 0x36,
	0x10, 0xf6, 0x4b, 0x7e, 0x4c, 0xfc, 0x0a, 0x91, 0x26, 0xaa, 0xdb, 0x83, 0xcb, 0x02, 0xdd, 0xb4,
	0xdd, 0x2c, 0x0a, 0x27, 0xc8, 0xa1, 0x45, 0x17, 0x9b, 0x78, 0x0d, 0x47, 0x40, 0x12, 0x07, 0x72,
	0xb2, 0xd7, 0x40, 0x96, 0xd8, 0x84, 0x85, 0x2d, 0x1b, 0x14, 0xed, 0xc2, 0xe7, 0xfe, 0x8c, 0x5e,
	0x7b, 0xee, 0xff, 0xd8, 0x7f, 0x55, 0x88, 0xa4, 0xa8, 0x87, 0x63, 0x63, 0x73, 0xe3, 0xcc, 0x7c,
	0x33, 0x1c, 0xce, 0x7c, 0x33, 0x12, 0x34, 0x9e, 0xd8, 0xc2, 0x75, 0x16, 0xf4, 0xdd, 0x82, 0xcd,
	0xf9, 0x1c, 0x55, 0x94, 0x88, 0xaf, 0xa0, 0x3c, 0x62, 0xf4, 0x89, 0xfa, 0xa8, 0x09, 0x05, 0xea,
	0x99, 0xf9, 0x6e, 0xfe, 0xb8, 0x66, 0x17, 0xa8, 0x87, 0x10, 0x94, 0xf8, 0x7a, 0x41, 0xcc, 0x82,
	0xd0, 0x88, 0x33, 0xea, 0x40, 0x75, 0xc1, 0xe6, 0x2b, 0xea, 0x11, 0x66, 0x16, 0x85, 0x5e, 0xcb,
	0xf8, 0xdf, 0x3c, 0xb4, 0x6f, 0x88, 0x13, 0x2c, 0x19, 0x99, 0x11, 0x9f, 0xdf, 0xcd, 0xa9, 0xcf,
	0x91, 0x09, 0x15, 0xc7, 0x7f, 0x5a, 0x4e, 0x1d, 0xa6, 0x22, 0x47, 0x62, 0x68, 0x99, 0x10, 0x87,
	0x51, 0xff, 0x49, 0x44, 0x32, 0xec, 0x48, 0x44, 0xc7, 0xd0, 0x9a, 0xc5, 0x71, 0xee, 0xc3, 0x1c,
	0x4a, 0xc2, 0x37, 0xab, 0x46, 0x07, 0x60, 0x04, 0xcf, 0xce, 0x1f, 0xdc, 0x34, 0x84, 0x5d, 0x0a,
	0xe8, 0x5b, 0xa8, 0x89, 0xc3, 0x98, 0x7a, 0xc4, 0x2c, 0x0b, 0x4b, 0xac, 0xc0, 0xff, 0xe5, 0xa1,
	0x65, 0xf9, 0xc1, 0x82, 0xb8, 0x9c, 0xce, 0x7d, 0x99, 0xe5, 0x09, 0xa0, 0xd1, 0xe5, 0x78, 0x74,
	0x3d, 0xb8, 0x1f, 0x3c, 0xae, 0x9c, 0xe9, 0x92, 0x88, 0x4b, 0x65, 0xc2, 0xfb, 0x91, 0xe5, 0x53,
	0x64, 0x40, 0xbf, 0x40, 0x2d, 0x46, 0x85, 0xa9, 0x35, 0x7b, 0xe8, 0x5d, 0x54, 0x5f, 0x0d, 0xb3,
	0x63, 0x10, 0xea, 0xc2, 0x9e, 0xbf, 0x9c, 0x11, 0x46, 0xdd, 0x07, 0x9f, 0x72, 0x55, 0xd2, 0xa4,
	0x4a, 0x16, 0x2a, 0xf8, 0x8b, 0xb0, 0xc0, 0x2c, 0x76, 0x8b, 0xb2, 0x50, 0x42, 0xc4, 0x27, 0x50,
	0xbb, 0x08, 0x02, 0xc2, 0x6f, 0xe7, 0x9e, 0x08, 0xe4, 0x32, 0xca, 0xa9, 0xeb, 0x4c, 0x29, 0x5f,
	0xab, 0x14, 0x93, 0x2a, 0xfc, 0xb9, 0x08, 0x25, 0x01, 0xcd, 0xf6, 0xf3, 0x00, 0x8c, 0xa9, 0x33,
	0x21, 0x53, 0x75, 0xbb, 0x14, 0xc2, 0x80, 0x1e, 0x09, 0x5c, 0x46, 0x17, 0x61, 0x39, 0x54, 0x53,
	0x93, 0x2a, 0xcd, 0x83, 0x52, 0x82, 0x07, 0x99, 0x34, 0x8c, 0x8d, 0x34, 0xc2, 0xf7, 0x04, 0xcb,
	0x89, 0xa8, 0x90, 0x6c, 0x41, 0x24, 0xa2, 0x37, 0x50, 0x9e, 0x0b, 0xc6, 0x99, 0x95, 0x6e, 0xfe,
	0x78, 0xaf, 0xd7, 0xd2, 0xa5, 0x93, 0x44, 0xb4, 0x95, 0x39, 0x2c, 0xb3, 0x13, 0x3d, 0xdc, 0xac,
	0x0a, 0x6c, 0x5c, 0x66, 0x5d, 0x12, 0x3b, 0x06, 0xa1, 0x01, 0xb4, 0x67, 0x19, 0x06, 0x9a, 0x35,
	0xe1, 0xf8, 0xb5, 0x76, 0xcc, 0x52, 0xd4, 0xde, 0x70, 0x41, 0x97, 0xd0, 0xa2, 0x69, 0x86, 0x98,
	0x20, 0xa2, 0x98, 0x3a, 0x4a, 0x86, 0x41, 0x76, 0xd6, 0x01, 0xf5, 0xa1, 0xed, 0x3e, 0xd3, 0xa9,
	0x37, 0x62, 0x1e, 0x61, 0xb7, 0xcb, 0xd9, 0x84, 0x30, 0xb3, 0x2e, 0x82, 0x1c, 0xe9, 0x20, 0x77,
	0x8c, 0xce, 0x28, 0xa7, 0x2b, 0x62, 0xf9, 0xfc, 0xfc, 0xcc, 0xde, 0x70, 0xc0, 0x6f, 0xc1, 0x08,
	0xdf, 0x15, 0xa0, 0xef, 0xc1, 0xf0, 0xc3, 0x83, 0x99, 0xef, 0x16, 0x8f, 0xf7, 0x7a, 0x0d, 0x1d,
	0x42, 0x54, 0x40, 0xda, 0xf0, 0x03, 0x34, 0x87, 0x84, 0x0f, 0x56, 0xc4, 0xe7, 0x81, 0xe5, 0x2f,
	0x96, 0x5c, 0xcc, 0x07, 0xf5, 0x5d, 0x49, 0xe5, 0xa2, 0x2d, 0x05, 0x74, 0x02, 0xc6, 0x34, 0xbc,
	0x58, 0x10, 0x61, 0x5b, 0x3e, 0xa7, 0x3d, 0x5b, 0xa2, 0xf0, 0x8f, 0xd0, 0xd2, 0x61, 0x47, 0x4b,
	0x1e, 0xc6, 0x3d, 0x84, 0x32, 0x11, 0xb2, 0x08, 0x5c, 0xb7, 0x95, 0x84, 0xff, 0xc9, 0x43, 0x63,
	0xec, 0xac, 0x48, 0x98, 0x95, 0xcc, 0xe0, 0x10, 0xca, 0xcb, 0x80, 0x30, 0x2b, 0x22, 0xa2, 0x92,
	0xd0, 0x77, 0x50, 0x0a, 0x93, 0x16, 0x7c, 0xdb, 0x78, 0x8f, 0x30, 0x89, 0x5d, 0xe3, 0x30, 0xe2,
	0x73, 0xcb, 0x53, 0x94, 0xd5, 0x32, 0x3a, 0x85, 0xba, 0x3c, 0x4b, 0xca, 0x08, 0x6e, 0xbe, 0xc0,
	0xa4, 0x14, 0x08, 0xff, 0x09, 0xad, 0x8f, 0x64, 0x4a, 0xf8, 0x17, 0xa4, 0x77, 0x08, 0xe5, 0x30,
	0x07, 0x7d, 0xb3, 0x92, 0x12, 0xdc, 0x2d, 0xee, 0xe4, 0x2e, 0x7e, 0x0b, 0xfb, 0x43, 0xc2, 0x2f,
	0x7c, 0x97, 0x04, 0x7c, 0xce, 0x54, 0x3b, 0x8e, 0xa0, 0x12, 0xc6, 0x79, 0xd4, 0x63, 0xa9, 0xc2,
	0xe2, 0x0b, 0x40, 0x49, 0xb4, 0xaa, 0xf2, 0xcf, 0xe9, 0xa6, 0x7f, 0x15, 0x73, 0x5f, 0x01, 0x93,
	0xcd, 0xff, 0x9c, 0x87, 0x7a, 0x52, 0xbf, 0x31, 0xfe, 0x71, 0xea, 0x85, 0xdd, 0x63, 0xa7, 0xf7,
	0x44, 0x71, 0xc7, 0x9e, 0x28, 0x6d, 0xdf, 0x13, 0x46, 0x62, 0x4f, 0x6c, 0xdf, 0x02, 0xc9, 0xee,
	0x56, 0xd2, 0xdd, 0xc5, 0x6f, 0xa0, 0xa5, 0xa9, 0x38, 0xe6, 0xe2, 0x9b, 0x70, 0x00, 0x86, 0xd8,
	0xa6, 0xea, 0x41, 0x52, 0xc0, 0x3f, 0x40, 0x33, 0xcd, 0xd9, 0x34, 0xce, 0xd8, 0x82, 0x3b, 0x3f,
	0x4b, 0xe3, 0x8a, 0x2f, 0xe1, 0x2e, 0xd7, 0x9c, 0x04, 0x69, 0x5c, 0x3d, 0xc2, 0xb5, 0xa0, 0xa1,
	0x71, 0x9f, 0xe6, 0xd4, 0xfb, 0xe9, 0x77, 0xa8, 0xc5, 0x9f, 0x87, 0x3d, 0xa8, 0xdc, 0x3e, 0xdc,
	0x0c, 0x6c, 0xab, 0xdf, 0xce, 0xa1, 0x7d, 0x68, 0x8c, 0xad, 0xdb, 0xe1, 0xf5, 0xe0, 0xb1, 0x7f,
	0x35, 0xb2, 0xfa, 0x83, 0x76, 0x1e, 0xb5, 0xa1, 0x7e, 0xf3, 0x70, 0x7d, 0x6f, 0x45, 0x9a, 0x42,
	0xef, 0x6f, 0x03, 0x6a, 0x57, 0x94, 0x30, 0x87, 0xb9, 0xcf, 0x6b, 0xf4, 0x1e, 0xaa, 0x1f, 0x09,
	0x59, 0xdc, 0x85, 0xef, 0x3e, 0xdc, 0x1c, 0xce, 0xf0, 0xc2, 0x8e, 0xb9, 0xa9, 0x97, 0x95, 0xc2,
	0x39, 0x74, 0x06, 0x95, 0xa1, 0x5a, 0x88, 0x5b, 0x61, 0x9d, 0xf4, 0xc8, 0xe1, 0x1c, 0x3a, 0x87,
	0xaa, 0xf2, 0x0a, 0x76, 0xb8, 0x35, 0x53, 0x6e, 0x01, 0xce, 0xa1, 0xdf, 0xa0, 0x31, 0x24, 0xbc,
	0x1f, 0xae, 0xae, 0xd7, 0x3b, 0xff, 0x2a, 0x9c, 0xef, 0x44, 0xe3, 0x5f, 0x9b, 0xb0, 0x05, 0xf5,
	0xe4, 0xd0, 0xa0, 0x8e, 0x06, 0x6c, 0x4c, 0x5e, 0xe7, 0x9b, 0x17, 0x6d, 0x72, 0xce, 0x70, 0x0e,
	0x7d, 0x10, 0xd3, 0x2a, 0xd6, 0x82, 0x77, 0xb9, 0x56, 0xff, 0x43, 0xd9, 0x01, 0xd9, 0x59, 0xf3,
	0xf7, 0x50, 0x8d, 0x16, 0x5f, 0xa2, 0x67, 0xa9, 0x5d, 0xb8, 0xd3, 0xff, 0x03, 0x40, 0xbc, 0x9b,
	0x12, 0x55, 0xc8, 0x2c, 0xac, 0xce, 0x16, 0x3e, 0x88, 0x08, 0x35, 0xbd, 0xa6, 0xd1, 0x51, 0xf2,
	0xbd, 0x89, 0x2f, 0x42, 0x22, 0x87, 0xcc, 0x4e, 0xc7, 0xb9, 0x49, 0x59, 0xfc, 0x1a, 0x9e, 0xfe,
	0x1f, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xae, 0x7c, 0x11, 0x2b, 0x0a, 0x00, 0x00,
}
